{"version":3,"sources":["color-context.ts","QuotLink.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","ColorContext","React","createContext","QuotLink","props","color","useContext","href","target","rel","style","background","id","className","icon","App","waitForFade","useState","colorIndex","setColorIndex","opacity","setOpacity","quote","setQuote","author","setAuthor","currentlyFetching","setCurrentlyFetching","useEffect","displayNewQuote","newIndex","length","fetchAndDisplayQuote","then","a","Promise","resolve","setTimeout","axios","get","response","data","twitterShareUrl","tumblrShareUrl","Provider","value","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGMA,G,MAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,YAIxDC,EAFMC,IAAMC,cAAcH,EAAO,ICkBjCI,MAdf,SAAkBC,GAAuB,IAAD,EAChCC,EAAQC,qBAAWN,GACzB,OACE,mBAAGO,KAAMH,EAAMG,KACZC,OAAO,SACPC,IAAI,aACJC,MAAO,CAACC,WAAYN,GACpBO,GAAE,UAAER,EAAMQ,UAAR,QAAc,GAChBC,UAAU,qBALb,SAME,mBAAGA,UAAS,aAAQT,EAAMU,KAAd,mB,iBCqDHC,MAhEf,WAAgB,IAOVC,EAPS,EAEuBC,mBAAS,GAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGiBF,mBAAS,GAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIaJ,mBAAS,IAJtB,mBAINK,EAJM,KAICC,EAJD,OAKeN,mBAAS,IALxB,mBAKNO,EALM,KAKEC,EALF,OAMqCR,oBAAS,GAN9C,mBAMNS,EANM,KAMaC,EANb,KASbC,qBAAU,WACRC,MAEC,IAEH,IAAMA,EAAkB,WACtB,IAAIH,EAAJ,CACAC,GAAqB,GACrB,IAAIG,EAAWZ,EAAa,EACxBY,GAAY/B,EAAOgC,SAAQD,EAAW,GAC1CX,EAAcW,GACdE,IAAuBC,SAInBD,EAAoB,uCAAG,4BAAAE,EAAA,6DAC3Bb,EAAW,GACXL,EAAe,IAAImB,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAFjC,SAGJE,IAAMC,IAAI,oCAHN,cAGrBC,EAHqB,gBAIrBxB,EAJqB,OAK3BO,EAASiB,EAASC,KAAKnB,OACvBG,EAAUe,EAASC,KAAKjB,QACxBH,EAAW,GACXM,GAAqB,GARM,4CAAH,qDAWpBtB,EAAQN,EAAOmB,GACfwB,EAAe,gDAA4CpB,EAA5C,cAAuDE,GACtEmB,EAAiB,mGACTnB,EADS,oBACSF,EADT,oCAGvB,OACE,cAAC,EAAasB,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,qBAAKQ,UAAU,MAAMH,MAAO,CAACC,WAAYN,GAAzC,SACE,sBAAKO,GAAG,YAAYF,MAAO,CAACL,SAA5B,UACE,oBAAGO,GAAG,OAAOF,MAAO,CAACU,WAArB,UACE,mBAAGP,UAAU,qBADf,IACqCS,KAErC,oBAAGV,GAAG,SAASF,MAAO,CAACU,WAAvB,eAAoCI,KACpC,sBAAKX,UAAU,oBAAf,UACE,cAAC,EAAD,CAAUD,GAAG,cAAcE,KAAK,aAAaP,KAAMmC,IACnD,cAAC,EAAD,CAAU5B,KAAK,YAAYP,KAAMoC,IACjC,qBAAK9B,UAAU,WACf,wBACED,GAAG,YACHF,MAAO,CAACC,WAAYN,GACpByC,QAASjB,EAHX,kCC7CGkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a78c552e.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst colors = ['#000000', '#FE4A49', '#832161', '#645853', '#241909', '#577399'];\n\nconst ColorContext = React.createContext(colors[0]);\n\nexport default ColorContext;\n\nexport {colors};\n\n","import {useContext} from \"react\";\nimport ColorContext from \"./color-context\";\n\ntype QuotLinkProps = {\n  href: string,\n  icon: string,\n  id?: string,\n}\n\nfunction QuotLink(props: QuotLinkProps) {\n  const color = useContext(ColorContext);\n  return (\n    <a href={props.href}\n       target='_blank'\n       rel='noreferrer'\n       style={{background: color}}\n       id={props.id ?? ''}\n       className=\"link flex-shrink-0\">\n      <i className={`fa ${props.icon} link-icon`}/>\n    </a>\n  );\n}\n\nexport default QuotLink;","import './App.scss';\nimport {useEffect, useState} from \"react\";\nimport QuotLink from \"./QuotLink\";\nimport ColorContext, {colors} from './color-context'\nimport axios from \"axios\";\n\n\nfunction App() {\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [opacity, setOpacity] = useState(0.0);\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [currentlyFetching, setCurrentlyFetching] = useState(false);\n  let waitForFade: Promise<undefined>;\n\n  useEffect(() => {\n    displayNewQuote();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const displayNewQuote = () => {\n    if (currentlyFetching) return;\n    setCurrentlyFetching(true);\n    let newIndex = colorIndex + 1;\n    if (newIndex >= colors.length) newIndex = 0;\n    setColorIndex(newIndex);\n    fetchAndDisplayQuote().then();\n  };\n\n\n  const fetchAndDisplayQuote = async () => {\n    setOpacity(0.0);\n    waitForFade = (new Promise((resolve) => setTimeout(resolve, 1000)));\n    const response = await axios.get(\"https://freequote.herokuapp.com/\");\n    await waitForFade;\n    setQuote(response.data.quote);\n    setAuthor(response.data.author);\n    setOpacity(1);\n    setCurrentlyFetching(false);\n  };\n\n  const color = colors[colorIndex];\n  const twitterShareUrl = `https://twitter.com/intent/tweet?text=${quote} - ${author}`;\n  const tumblrShareUrl = 'https://tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp' +\n    `&caption=${author}&content=${quote}&canonicalUrl=http://example.com`;\n\n  return (\n    <ColorContext.Provider value={color}>\n      <div className=\"App\" style={{background: color}}>\n        <div id=\"quote-box\" style={{color}}>\n          <p id=\"text\" style={{opacity}}>\n            <i className=\"fa fa-quote-left\"/> {quote}\n          </p>\n          <p id=\"author\" style={{opacity}}>- {author}</p>\n          <div className='buttons-container'>\n            <QuotLink id='tweet-quote' icon='fa-twitter' href={twitterShareUrl}/>\n            <QuotLink icon='fa-tumblr' href={tumblrShareUrl}/>\n            <div className='spacer'/>\n            <button\n              id='new-quote'\n              style={{background: color}}\n              onClick={displayNewQuote}>New quote\n            </button>\n          </div>\n        </div>\n      </div>\n    </ColorContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}